const pad = require('pad-number');
const fs = require('fs-extra');
const LCD = require('./LCD.js');
const rebound = require('./utils/rebound.js');
const Camera = require("./utils/camera.js");
const createTimelapse = require("./utils/createTimelapse.js");
const upload = require('./utils/upload.js');


const routes = {
    setup: {
        controls: (event) => {
exi            switch (event) {
                case "aRelease":
                    LCD.route("startConfirmation");
                    break;
                case "aHold":
                    LCD.route("pictures");
                    break;
                case "bRelease":
                    let state = LCD.state;
                    let value = state.setup.options[LCD.state.setup.selection].value + 1;
                    value = rebound(value, state.setup.options[LCD.state.setup.selection].bounds);
                    state.setup.options[LCD.state.setup.selection].value = value;
                    LCD.setState(state)
                    break;
                case "bHold":
                    let state = LCD.state;
                    let options = Object.keys(LCD.state.setup.options);
                    let index = options.indexOf(LCD.state.setup.selection) + 1;
                    index = rebound(index, [0, options.length - 1]);
                    state.setup.selection = options[index];
                    LCD.setState(state)
                    break;
                case "cRelease":
                    let state = LCD.state;
                    let value = state.setup.options[LCD.state.setup.selection].value - 1;
                    value = rebound(value, state.setup.options[LCD.state.setup.selection].bounds);
                    state.setup.options[LCD.state.setup.selection].value = value;
                    LCD.setState(state)
                    break;
                case "cHold":
                    let state = LCD.state;
                    let options = Object.keys(LCD.state.setup.options);
                    let index = options.indexOf(LCD.state.setup.selection) - 1;
                    index = rebound(index, [0, options.length - 1]);
                    state.setup.selection = options[index];
                    LCD.setState(state)
                    break;
                default:
                    break;
            }
        },
        init: () => {},
        render: () => {
            return {
                cursor: LCD.state.setup.options[LCD.state.setup.selection].cursor,
                lines: [
                    `SETUP`,
                    `LAPSES ${pad(LCD.state.setup.options.hours.value, 2)}h${pad(LCD.state.setup.options.minutes.value, 2)}m${pad(LCD.state.setup.options.seconds.value,2)}s`
                ]
            }
        }
    },
    pictures: {
        controls: (event) => {
            switch (event) {
                case "aRelease":
                    LCD.route('buildConfirmation');
                    break;
                default:
                    break;
            }
        },
        init: async() => {

            // Stop now if current loop already exist
            if (LCD.state.pictures.interval) return

            let state = LCD.state;
            let lapse = state.setup.options["hours"].value * 60 * 60 * 1000
                + state.setup.options["minutes"].value * 60 * 1000
                + state.setup.options["seconds"].value * 1000;

            // Check if image folder exists or create it if not and reset frame array
            state.pictures.start = new Date();
            state.pictures.frames = [];
            if (!fs.existsSync(state.pictures.dir)) fs.mkdirSync(state.pictures.dir);
            await fs.emptyDir(state.pictures.dir);

            // Setup picture taking loop
            const takePicture = async () => {
                try {
                    state.pictures.frames.push(await Camera.takePicture(state.pictures.frames.length));
                    LCD.setState(state);
                } catch (error) {
                    console.log("ERROR : ", error);
                }

            }
            takePicture();
            state.pictures.interval = setInterval(takePicture, lapse - 5000 < 0 ? 0 : lapse - 6000) // Remove time for picture from lapse
        },
        render: () => {
            return {
                cursor: null,
                lines: [
                    `TAKING PICTURES`,
                    `${pad(LCD.state.pictures.start.getDate(), 2)}/${pad(LCD.state.pictures.start.getMonth() + 1, 2)} ${pad(LCD.state.pictures.start.getHours() + 1, 2)}:${pad(LCD.state.pictures.start.getMinutes(), 2)} ${pad(LCD.state.pictures.frames.length,4)}`
                ]
            }
        }
    },
    startConfirmation: {
        controls: (event)=>{
            switch (event) {
                case "aRelease":
                    LCD.route("pictures")
                    break;
                case "aHold":
                    LCD.route("setup");
                    break;
                default:
                    break;
            }
        },
        init: () => {},
        render: () => {
            return {
                cursor: null,
                lines: [
                    `PRESS TO START`,
                    `LONG TO ABORT`
                ]
            }
        }
    },
    errorCam: {
        controls: (event) => {
            switch (event) {
                default:
                    break;
            }
        },
        init: () => {
            let state = LCD.state;
            let load = ["+---", "-+--", "--+-", "---+", "--+-", "-+--"], i = 1;
            let scan = setInterval(async()=>{
                state.error = load[i++%load.length]
                try {
                    state.pictures.initialized = await Camera.init(state.pictures.dir);
                    LCD.route('setup');
                    clearInterval(scan);
                } catch (error) {
                    console.log("ERROR : ", error);
                }
                LCD.setState(state);
            },100)
        },
        render: () => {
            return {
                cursor: null,
                lines: [
                    `CHECK CAMERA`,
                    `SCANNING  ${LCD.state.error}`
                ]
            }
        }
    },
    buildConfirmation: {
        controls: (event) => {
            switch (event) {
                case "aRelease":
                    if (LCD.state.pictures.interval) clearInterval(LCD.state.pictures.interval);
                    LCD.state.pictures.interval = null;
                    LCD.setState(LCD.state)
                    LCD.route("build")
                    break;
                case "aHold":
                    LCD.route("pictures")
                    break;
                default:
                    break;
            }
        },
        init: () => {
        },
        render: () => {
            return {
                cursor: null,
                lines: [
                    `PRESS TO BUILD`,
                    `LONG TO CONTINUE`
                ]
            }
        }
    },
    build: {
        controls: (event) => {
            switch (event) {
                default:
                    break;
            }
        },
        init: async() => {
            try {
                let state = LCD.state;
                state.timelapse = await createTimelapse(state.pictures.frames);
                LCD.setState(state);
                LCD.route("upload")
            }
            catch(error){
                console.log(error);
            }
        },
        render: () => {
            return {
                cursor: null,
                lines: [
                    `BUILDING`,
                    `TIMELAPSE`
                ]
            }
        },
    },
    errorBuild: {
        controls: (event) => {
            switch (event) {
                case "aRelease":
                LCD.route('setup')
                default:
                    break;
            }
        },
        init: () => {},
        render: () => {
            return {
                cursor: null,
                lines: [
                    `ERROR BUILDING`,
                    `TIMELAPSE`
                ]
            }
        }
    },
    upload: {
        controls: (event) => {
            switch (event) {
                case "aRelease":
                    LCD.route('setup')
                default:
                    break;
            }
        },
        init: async () => {
            let state = LCD.state;
            try {
                state.upload = await upload(state.timelapse);
                LCD.setState(state);
            }
            catch (error) { console.log(error); }
        },
        render: () => {
            return {
                cursor: null,
                lines: [
                    `UPLOADED`,
                    `TIMELAPSE ${LCD.state.upload}`
                ]
            }
        }
    }
}

module.exports = routes
